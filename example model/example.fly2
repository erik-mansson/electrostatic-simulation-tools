-- The analysis of particles in specific rays (for VMI-resolution) by .lua script
-- uses the .lua adjustable variable _number_of_directions and prints the summary
-- after running _G.FLY2_IONS_PER_GROUP particles. This means that each direction
-- gets _G.FLY2_IONS_PER_GROUP/_number_of_directions particles, e.g. 32/8=4 by default.
-- If you change the GUI's "Num particles" (in particle definition GUI) you should
-- use the command line to set _G.FLY2_IONS_PER_GROUP to the same value.
-- (Making "Num particles" a multiple of _G.FLY2_IONS_PER_GROUP prints multiple summaries 
--  of particles with the same energy, instead of one big group with better statistics.)
_G.FLY2_IONS_PER_GROUP = 32

-- FLY2_SOURCE_DISTR is just used to print info about source positions in the resolution summary
_G.FLY2_SOURCE_DISTR = "gaussian std from GUI"

local t = {coordinates = 0}

-- Can list as many energies as desired: for index,energy in ipairs({2,6,20,}) do
for index,energy in ipairs({3, 18,}) do
  t[#t+1] = standard_beam {n = _G.FLY2_IONS_PER_GROUP, tob = 0, cwf = 1,
    mass = 0.000548579903, charge = -1, ke = energy,
    color = (index < 2) and index or (index + 1),
    color = (index == 1) and 7 or ((index == 2) and 1 or index),
    direction = vector(1,0,0), -- Will be overridden by Lua program
    position = gaussian3d_distribution {mean = vector(8.5, 0, 0), stdev = vector(0.06, 1, 0.06)}
  }
end

-- Without energy list, a single definition can be made like this (here cation):
-- t[#t+1] = standard_beam {n = _G.FLY2_IONS_PER_GROUP, tob = 0, cwf = 1,
--   mass = 1000, charge = 1, ke = 0.0001, color = 5,
--   direction = vector(1,0,0), -- Will be overridden by Lua program
--   position = gaussian3d_distribution {mean = vector(8.5, 0, 0), stdev = vector(0.06, 1, 0.06)}
-- }

particles(t)
